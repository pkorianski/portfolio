{"version":3,"sources":["me.jpg","logo.svg","components/MainView.jsx","components/Projects.jsx","components/layout/MyNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainView","pickColor","colors","Math","floor","random","length","Container","Row","Col","xs","style","marginRight","marginLeft","Card","marginTop","CardImg","width","top","src","me","CardBody","CardTitle","CardText","url","CardHeader","className","Progress","color","value","String","Projects","MyNavbar","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","backgroundColor","onClick","Collapse","navbar","Nav","NavItem","NavLink","left","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55b99343.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.e9576e32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardImg,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  CardText,\n  Progress\n} from \"reactstrap\";\nimport { SocialIcon } from \"react-social-icons\";\nimport me from \"../me.jpg\";\n\nconst MainView = () => {\n  const pickColor = () => {\n    let colors = [\"success\", \"info\", \"warning\", \"danger\", \"info\"],\n      index = Math.floor(Math.random() * Math.floor(colors.length - 1));\n    return colors[index];\n  };\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col xs=\"5\">\n            <Row style={{ marginRight: \"0.5em\", marginLeft: \"0.25em\" }}>\n              <Card style={{ marginTop: \"2em\" }}>\n                <CardImg\n                  style={{\n                    width: \"70%\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    marginTop: \"2em\"\n                  }}\n                  top\n                  width=\"50%\"\n                  src={me}\n                />\n                <CardBody>\n                  <CardTitle>\n                    <strong>Who am I?</strong>\n                  </CardTitle>\n                  <CardText>\n                    Software Engineer who loves <i>innovation</i>,{\" \"}\n                    <i>Javascript</i>, <i>Python</i>, and <i>music</i>\n                  </CardText>\n                  <CardText>\n                    <SocialIcon\n                      style={{ width: \"2em\" }}\n                      url=\"https://www.linkedin.com/in/pmkorianski/\"\n                    />\n                    <SocialIcon\n                      style={{ width: \"2em\", marginLeft: \"0.5em\" }}\n                      url=\"https://twitter.com/patkorianski\"\n                    />\n                    <SocialIcon\n                      style={{ width: \"2em\", marginLeft: \"0.5em\" }}\n                      url=\"https://github.com/pkorianski\"\n                    />\n                  </CardText>\n                </CardBody>\n              </Card>\n            </Row>\n            <Row style={{ marginRight: \"0.5em\", marginLeft: \"0.25em\" }}>\n              <Card style={{ marginTop: \"2em\", width: \"100%\" }}>\n                <CardHeader>Top Skills (10 yr scale)</CardHeader>\n                <CardBody>\n                  <CardTitle>\n                    <strong>Software Engineer, SessionM</strong>\n                  </CardTitle>\n                  <div className=\"progress-bars\">\n                    <div className=\"skill-bar\">\n                      <div className=\"text-left\">Javascript</div>\n                      <Progress\n                        color={pickColor()}\n                        value={String((2 / 10) * 100)}\n                      >\n                        2yrs\n                      </Progress>\n                    </div>\n                    <div className=\"skill-bar\">\n                      <div className=\"text-left\">React</div>\n                      <Progress\n                        color={pickColor()}\n                        value={String((2 / 10) * 100)}\n                      >\n                        2yrs\n                      </Progress>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n            </Row>\n          </Col>\n          <Col xs=\"7\">\n            <Row style={{ marginRight: \"0.25em\" }}>\n              <Card style={{ marginTop: \"2em\", width: \"100%\" }}>\n                <CardHeader>Education</CardHeader>\n                <CardBody>\n                  <CardTitle>\n                    <strong>University of Connecticut</strong>\n                  </CardTitle>\n                  <CardText>\n                    <i>2014-2017</i>\n                  </CardText>\n                  <CardText>Computer Science / Engineering Mgmt</CardText>\n                  <CardTitle>\n                    <strong>Nashua Community College</strong>\n                  </CardTitle>\n                  <CardText>\n                    <i>2012-2014</i>\n                  </CardText>\n                  <CardText>Liberal Arts (Business)</CardText>\n                </CardBody>\n              </Card>\n            </Row>\n            <Row style={{ marginRight: \"0.25em\" }}>\n              <Card style={{ marginTop: \"2em\", width: \"100%\" }}>\n                <CardHeader>Experience</CardHeader>\n                <CardBody>\n                  <CardTitle>\n                    <strong>Software Engineer, SessionM</strong>\n                  </CardTitle>\n                  <CardText>\n                    <i>2019-Present</i>\n                  </CardText>\n                  <CardText>\n                    <ul>\n                      <li>\n                        Architected & engineered new integrations which includes\n                        social listening, Alexa skills, and an incoming Loyalty\n                        wallet (Facebook)\n                      </li>\n                      <li>\n                        Developed data simulation scripts in Python to use for\n                        demoing purposes which resulted in helping build our new\n                        Reporting tool\n                      </li>\n                      <li>\n                        Utilized React, Sass, and HTML to further develop new UI\n                        solutions into the SessionM platform\n                      </li>\n                      <li>\n                        Learned and used Ruby, Ruby-on-Rails, AWS, Grafana,\n                        RabbitMQ, C# and SQL to fix bugs and enhance SessionMâ€™s\n                        architecture\n                      </li>\n                    </ul>\n                  </CardText>\n                  <CardTitle>\n                    <strong>Software Engineer, SessionM</strong>\n                  </CardTitle>\n                  <CardText>\n                    <i>2019-Present</i>\n                  </CardText>\n                  <CardText>\n                    <ul>\n                      <li>\n                        Architected & engineered new integrations which includes\n                        social listening, Alexa skills, and an incoming Loyalty\n                        wallet (Facebook)\n                      </li>\n                      <li>\n                        Developed data simulation scripts in Python to use for\n                        demoing purposes which resulted in helping build our new\n                        Reporting tool\n                      </li>\n                      <li>\n                        Utilized React, Sass, and HTML to further develop new UI\n                        solutions into the SessionM platform\n                      </li>\n                      <li>\n                        Learned and used Ruby, Ruby-on-Rails, AWS, Grafana,\n                        RabbitMQ, C# and SQL to fix bugs and enhance SessionMâ€™s\n                        architecture\n                      </li>\n                    </ul>\n                  </CardText>\n                </CardBody>\n              </Card>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default MainView;\n","import React from \"react\";\n\nconst Projects = () => {\n  return (\n    <div>\n      <h1>Projects</h1>\n    </div>\n  );\n};\n\nexport default Projects;\n","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nconst MyNavbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navbar color=\"dark\" light expand=\"md\">\n      <NavbarBrand\n        className=\"text-white\"\n        href=\"/portfolio\"\n        style={{ marginLeft: \"2.5em\" }}\n      >\n        PATRICK M. KORIANSKI\n      </NavbarBrand>\n      <NavbarToggler style={{ backgroundColor: \"white\" }} onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar style={{ marginRight: \"1.5em\" }}>\n          <NavItem>\n            <NavLink className=\"text-white\" href=\"/portfolio\" left>\n              Home\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className=\"text-white\" href=\"/portfolio/projects\" left>\n              Projects\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n\nexport default MyNavbar;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// Components\nimport MainView from \"./components/MainView\";\nimport Projects from \"./components/Projects\";\nimport MyNavbar from \"./components/layout/MyNavbar\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <MyNavbar />\n        <Switch>\n          <Route exact path=\"/portfolio\" component={MainView} />\n          <Route exact path=\"/portfolio/projects\" component={Projects} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}